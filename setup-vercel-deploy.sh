#!/bin/bash

# Vercel Direct Deployment Setup Script
# This script automatically configures any project for direct Vercel deployment
# Usage: Run this in any project directory to set up direct deployment

set -e  # Exit on any error

echo "🚀 Vercel Direct Deployment Setup"
echo "=================================="

# Get project information
PROJECT_NAME=$(basename "$PWD")
GIT_REPO=$(git config --get remote.origin.url 2>/dev/null || echo "unknown")

echo "📁 Project: $PROJECT_NAME"
echo "🔗 Git Repo: $GIT_REPO"
echo ""

# Check if this is a git repository
if [ ! -d ".git" ]; then
    echo "❌ Not a git repository. Please initialize git first:"
    echo "   git init"
    echo "   git remote add origin <your-repo-url>"
    exit 1
fi

# Check if package.json exists
if [ ! -f "package.json" ]; then
    echo "❌ No package.json found. This script is for Node.js projects."
    exit 1
fi

# Install Vercel CLI if not present
if ! command -v vercel &> /dev/null; then
    echo "📦 Installing Vercel CLI..."
    npm install -g vercel
fi

# Check if logged in to Vercel
if ! vercel whoami &> /dev/null; then
    echo "🔐 Please log in to Vercel..."
    vercel login
fi

# Get Vercel project info
echo "🔍 Detecting Vercel project..."
PROJECT_INFO=$(vercel project ls --json 2>/dev/null | grep -i "$PROJECT_NAME" || echo "")

if [ -z "$PROJECT_INFO" ]; then
    echo "⚠️  No Vercel project found for '$PROJECT_NAME'"
    echo "   Run 'vercel' to link this project to Vercel"
    echo "   Or create a new project at https://vercel.com/new"
fi

# Create deployment script
echo "📝 Creating deployment script..."
cat > deploy.sh << 'EOF'
#!/bin/bash

# Auto-generated Vercel Direct Deployment Script
# Generated by setup-vercel-deploy.sh

set -e  # Exit on any error

PROJECT_NAME="$(basename "$PWD")"
PRODUCTION_URL="https://$(basename "$PWD").vercel.app"
VERCEL_DASHBOARD="https://vercel.com/$(vercel whoami 2>/dev/null | tr -d '>')/$(basename "$PWD")"

echo "🚀 $PROJECT_NAME - Direct Deployment"
echo "===================================="

# Check if there are any changes to commit
if [ -z "$(git status --porcelain)" ]; then
    echo "✅ No changes to commit"
else
    echo "📝 Committing changes..."
    
    # Add all changes
    git add .
    
    # Get commit message from argument or use default
    COMMIT_MSG=${1:-"Update $PROJECT_NAME"}
    
    # Commit changes
    git commit -m "$COMMIT_MSG"
    
    echo "✅ Changes committed"
fi

# Push to GitHub (this will trigger automatic deployment)
echo "📤 Pushing to GitHub..."
git push origin main

# Trigger direct Vercel deployment for immediate feedback
echo "🚀 Triggering direct Vercel deployment..."
vercel --prod

echo ""
echo "✅ Deployment complete!"
echo "🌐 Production URL: $PRODUCTION_URL"
echo "📊 Vercel Dashboard: $VERCEL_DASHBOARD"
echo ""
echo "💡 Tip: Use './deploy.sh \"Your commit message\"' to customize the commit message"
EOF

chmod +x deploy.sh

# Update package.json with deployment scripts
echo "📦 Updating package.json..."
if [ -f "package.json" ]; then
    # Check if scripts section exists
    if ! grep -q '"scripts"' package.json; then
        # Add scripts section
        sed -i '' 's/^{/{\n  "scripts": {\n    "deploy": ".\/deploy.sh",\n    "deploy:prod": "vercel --prod"\n  },/' package.json
    else
        # Add deployment scripts to existing scripts section
        if ! grep -q '"deploy"' package.json; then
            sed -i '' '/"scripts": {/a\
    "deploy": "./deploy.sh",\
    "deploy:prod": "vercel --prod",' package.json
        fi
    fi
fi

# Create .vercelignore if it doesn't exist
if [ ! -f ".vercelignore" ]; then
    echo "📄 Creating .vercelignore..."
    cat > .vercelignore << 'EOF'
# Dependencies
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build outputs
.next
out
build
dist

# Environment files
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.vscode
.idea
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db

# Logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
EOF
fi

# Create deployment documentation
echo "📚 Creating deployment documentation..."
cat > DEPLOYMENT.md << 'EOF'
# Vercel Direct Deployment Guide

This project is configured for direct Vercel deployment with full build visibility.

## 🚀 Quick Deploy

```bash
# Deploy with automatic commit and push
npm run deploy

# Or with custom commit message
npm run deploy "Your commit message"

# Direct deployment only (no git operations)
npm run deploy:prod
```

## 📋 Manual Steps

```bash
# 1. Commit changes
git add .
git commit -m "Your changes"

# 2. Push to GitHub
git push origin main

# 3. Deploy to Vercel
vercel --prod
```

## 🔧 Setup for New Projects

1. **Install Vercel CLI:**
   ```bash
   npm install -g vercel
   ```

2. **Login to Vercel:**
   ```bash
   vercel login
   ```

3. **Link your project:**
   ```bash
   vercel
   ```

4. **Run this setup script:**
   ```bash
   ./setup-vercel-deploy.sh
   ```

## 📊 Benefits

- ✅ **See Build Errors**: All build errors and warnings appear in console
- ✅ **Real-time Progress**: Watch the build process step by step
- ✅ **Immediate Feedback**: Know immediately if deployment succeeds or fails
- ✅ **Debug Easier**: See exactly what's happening during the build
- ✅ **No Webhook Delays**: Direct deployment is faster than GitHub webhooks

## 🛠️ Troubleshooting

### Vercel CLI not found
```bash
npm install -g vercel
```

### Not logged in to Vercel
```bash
vercel login
```

### Project not linked to Vercel
```bash
vercel
```

### Build errors
Check the console output during deployment for detailed error messages.
EOF

echo ""
echo "✅ Setup complete!"
echo ""
echo "📋 What was configured:"
echo "   ✅ Created deploy.sh script"
echo "   ✅ Added deployment scripts to package.json"
echo "   ✅ Created .vercelignore"
echo "   ✅ Created DEPLOYMENT.md documentation"
echo ""
echo "🚀 Ready to deploy:"
echo "   npm run deploy"
echo ""
echo "📚 See DEPLOYMENT.md for full documentation" 